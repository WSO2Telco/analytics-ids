<%
/*******************************************************************************
 * Copyright (c) 2015-2017, WSO2.Telco Inc. (http://www.wso2telco.com)
 *
 * All Rights Reserved. WSO2.Telco Inc. licences this file to you under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 ******************************************************************************/
 %>

<html>
    <body>
    Waiting for responses from identity server and validate response and forward to requested URI.
        <%
(function () {
    var configs = require('/configs/portal.js').config();
    var log = new Log();
    var api = require('/modules/api.js');
    var usr = require('/modules/user.js');
    var carbon = require('carbon');
    var constants = require("/modules/constants.js");

    var authorizationCode = request.getParameter("code");
    var tokenEndpointURI = configs.authentication.methods.oidcConfiguration.tokenEndpointURI;
    var redirectUri = configs.authentication.methods.oidcConfiguration.callbackurl;
    var clientId = configs.authentication.methods.oidcConfiguration.clientConfiguration.clientId;
    var clientSecret = configs.authentication.methods.oidcConfiguration.clientConfiguration.clientSecret;

    //call token endpoint and request an auth token for given auth code
    var authToken = api.authCode(authorizationCode, redirectUri, tokenEndpointURI, clientId, clientSecret);

    var userinfoEndpointURI = configs.authentication.methods.oidcConfiguration.userInfoEndpointURI;
    var accessToken = authToken.accessToken;

    //call token userinfo endpoint and request user details for given access code
    var userinfo = api.userinfo(userinfoEndpointURI, accessToken);


    var isIdpSessionTernminateEnabled = configs.authentication.methods.oidcConfiguration.enabled && configs.authentication.methods.oidcConfiguration.requiredIdpSessionTermination;

    if(userinfo == null || userinfo == ""){
        if(isIdpSessionTernminateEnabled){
            include('/extensions/authentication/oidc-logout.jag');
        } else {
            response.sendError(404, 'User Info not found');
        }
     }

    var username;
    if(userinfo.userid == null || userinfo.userid == ""){
        if(isIdpSessionTernminateEnabled){
            include('/extensions/authentication/oidc-logout.jag');
        } else {
            response.sendError(404, 'User claims are not set');
        }
        return;
    } else {
        username = userinfo.userid;
    }

    var user = carbon.server.tenantUser(username);

    //check user permissions
    var server = new carbon.server.Server();
    var um = new carbon.user.UserManager(server, user.tenantId);
    var permission = require("/modules/permission.js");
    user.roles = um.getRoleListOfUser(user.username);
    if (!permission.isAllowedUser(user, constants.LOGIN)) {
        log.error('You do not have permission to login to this application.Please contact your administrator and request permission');
        response.addCookie(request.getAllCookies());
        if(isIdpSessionTernminateEnabled){
            var idpLogOutUrl = configs.authentication.methods.oidcConfiguration.idpLogOutUrl;
            response.sendRedirect(idpLogOutUrl);
        } else {
            response.sendRedirect("/portal/controllers/error-pages/sso-error.jag");
        }
        return;
    }

    session.put("LOGGED_IN_USER", username);
    session.put('user', user);
    session.put("Loged", "true");
    session.put('authToken', accessToken);

    var destination =  configs.authentication.methods.oidcConfiguration.destination;
    response.sendRedirect(destination);

}());
%>
</body>
</html>


