@Plan:name('RealTimeFederatedExecutionPlan')

@Plan:statistics('true')

@Plan:trace('true')



@Export('COM_REALTIME_SUMMARY_TOTAL_FED_SUCCESS_FAILURE:1.0.0')
define stream exportStream (meta_day string, meta_total_attempts int, meta_success int, meta_total_failure int, meta_processing_failure int, meta_response_failure int, meta_other_failure int, meta__timestamp long);

@PrimaryKey('day')
@From(eventtable='rdbms', datasource.name='WSO2_ANALYTICS_PROCESSED_DATA_STORE_DB', table.name='TST_COM_WSO2TELCO_SUMMARY_TOTAL_FED_SUCCESS_FAILURE')
define table tst_table (
    day string,
    total_attempts int,
    success int ,
    total_failure int ,
    processing_failure int,
    response_failure int ,
    other_failure int ,
    _timestamp long);

@Import('com.wso2telco.userstatus.meta:1.0.0')
define stream UserStatusMetaStream (sessionID string, sourceIP string, operator string, appId string, isMSISDNHeader bool, userAgent string, consumerKey string, state string, nonce string, scope string, acrValue string, loginHint string, telcoScope string, status string, transactionId string, _timestamp long);

@Import('com.wso2telco.userstatus:1.0.0')
define stream UserSttatusStream (sessionID string, status string, sourceIP string, forwardedIP string, transactionId string, msisdn string, isNewUser bool, _timestamp long);

define stream FederatedProcessingStream (sessionID string, operator string, appId string,consumerKey string, status string, _timestamp long);
define stream FederatedSuccessStream (sessionID string, operator string, appId string,consumerKey string, status string, _timestamp long);
define stream FederatedFailedStream (sessionID string, operator string, appId string,consumerKey string, status string, _timestamp long);
define stream FederatedResponseFailedStream (sessionID string, operator string, appId string,consumerKey string, status string, _timestamp long);

define stream ProcessedFederatedSuccessStream(day string, total_attempts int, success int , total_failure int , processing_failure int,response_failure int , other_failure int ,_timestamp long);
define stream ProcessedFederatedFailedStream(day string, total_attempts int, success int , total_failure int , processing_failure int,response_failure int , other_failure int ,_timestamp long);
define stream ProcessedFederatedResponseFailedStream(day string, total_attempts int, success int , total_failure int , processing_failure int,response_failure int , other_failure int ,_timestamp long);


from UserSttatusStream[status == 'FED_IDP_AUTH_PROCESSING' ]#window.time(5 min) as T
join UserStatusMetaStream #window.time(5 min) as R
on T.sessionID == R.sessionID
select T.sessionID, R.operator, R.appId, R.consumerKey, T.status , T._timestamp
INSERT into FederatedProcessingStream;

from UserSttatusStream[status == 'FED_IDP_AUTH_PROCESSING_FAIL' ]#window.time(5 min) as T
join UserStatusMetaStream #window.time(5 min) as R
on T.sessionID == R.sessionID
select T.sessionID, R.operator, R.appId, R.consumerKey, T.status , T._timestamp
INSERT into FederatedFailedStream;

from UserSttatusStream[status == 'FED_IDP_AUTH_RESPONSE_FAIL' ]#window.time(5 min) as T
join UserStatusMetaStream #window.time(5 min) as R
on T.sessionID == R.sessionID
select T.sessionID, R.operator, R.appId, R.consumerKey, T.status , T._timestamp
INSERT into FederatedResponseFailedStream;

from UserSttatusStream[status == 'FED_IDP_AUTH_SUCCESS' ]#window.time(5 min) as T
join UserStatusMetaStream #window.time(5 min) as R
on T.sessionID == R.sessionID
select T.sessionID, R.operator, R.appId, R.consumerKey, T.status , T._timestamp
INSERT into FederatedSuccessStream;


/*  FEDERATED SUCCESS SCENARIO  */
from FederatedSuccessStream[status == 'FED_IDP_AUTH_SUCCESS']#window.time(5 min) as T
  join FederatedProcessingStream[status == 'FED_IDP_AUTH_PROCESSING']#window.time(5 min) as R
  on T.sessionID == R.sessionID
Select time:dateFormat(T._timestamp , 'yyyy-MM-dd') as day,
1 as total_attempts,1 as success,
0 as total_failure,0 as processing_failure,
0 as response_failure,0 as other_failure,T._timestamp as _timestamp
insert  into ProcessedFederatedSuccessStream;

from  tst_table   right outer join  ProcessedFederatedSuccessStream
    on ProcessedFederatedSuccessStream.day == tst_table.day
select
ProcessedFederatedSuccessStream.day , 
max(ifThenElse(tst_table.total_attempts is null, 0 , tst_table.total_attempts)) +1 as total_attempts,
max(ifThenElse(tst_table.success is null, 0 , tst_table.success)) +1 as success,
max(ifThenElse(tst_table.total_failure is null, 0 , tst_table.total_failure)) as total_failure,
max(ifThenElse(tst_table.processing_failure is null, 0 , tst_table.processing_failure)) as processing_failure,
max(ifThenElse(tst_table.response_failure is null, 0 , tst_table.response_failure)) as response_failure,
max(ifThenElse(tst_table.other_failure is null, 0 , tst_table.other_failure)) as other_failure,
ProcessedFederatedSuccessStream._timestamp as _timestamp
insert into  tst_table1;


/*  FEDERATED PROCESSING FAIL SCENARIO  */
from FederatedFailedStream[status == 'FED_IDP_AUTH_PROCESSING_FAIL']#window.time(5 min) as T
  join FederatedProcessingStream[status == 'FED_IDP_AUTH_PROCESSING']#window.time(5 min) as R
  on T.sessionID == R.sessionID
Select time:dateFormat(T._timestamp , 'yyyy-MM-dd') as day,
1 as total_attempts, 0 as success,
1 as total_failure,1 as processing_failure,
0 as response_failure,0 as other_failure,T._timestamp as _timestamp
insert  into ProcessedFederatedFailedStream;

from  tst_table   right outer join  ProcessedFederatedFailedStream
    on ProcessedFederatedFailedStream.day == tst_table.day
select
ProcessedFederatedFailedStream.day , 
max(ifThenElse(tst_table.total_attempts is null, 0 , tst_table.total_attempts)) +1 as total_attempts,
max(ifThenElse(tst_table.success is null, 0 , tst_table.success)) as success,
max(ifThenElse(tst_table.total_failure is null, 0 , tst_table.total_failure)) +1 as total_failure,
max(ifThenElse(tst_table.processing_failure is null, 0 , tst_table.processing_failure)) +1 as processing_failure,
max(ifThenElse(tst_table.response_failure is null, 0 , tst_table.response_failure)) as response_failure,
max(ifThenElse(tst_table.other_failure is null, 0 , tst_table.other_failure))  as other_failure,
ProcessedFederatedFailedStream._timestamp as _timestamp
insert into tst_table2;


/*  FEDERATED RESPONSE FAIL SCENARIO  */
from FederatedResponseFailedStream[status == 'FED_IDP_AUTH_RESPONSE_FAIL']#window.time(5 min) as T
  join FederatedProcessingStream[status == 'FED_IDP_AUTH_PROCESSING']#window.time(5 min) as R
  on T.sessionID == R.sessionID
Select time:dateFormat(T._timestamp , 'yyyy-MM-dd') as day,
1 as total_attempts, 0 as success,
1 as total_failure,0 as processing_failure,
1 as response_failure,0 as other_failure,T._timestamp as _timestamp
insert  into ProcessedFederatedResponseFailedStream;

from  tst_table  right outer join  ProcessedFederatedResponseFailedStream
    on ProcessedFederatedResponseFailedStream.day == tst_table.day
select
ProcessedFederatedResponseFailedStream.day , 
max(ifThenElse(tst_table.total_attempts is null, 0 , tst_table.total_attempts)) +1 as total_attempts,
max(ifThenElse(tst_table.success is null, 0 , tst_table.success)) as success,
max(ifThenElse(tst_table.total_failure is null, 0 , tst_table.total_failure)) +1 as total_failure,
max(ifThenElse(tst_table.processing_failure is null, 0 , tst_table.processing_failure)) as processing_failure,
max(ifThenElse(tst_table.response_failure is null, 0 , tst_table.response_failure)) +1 as response_failure,
max(ifThenElse(tst_table.other_failure is null, 0 , tst_table.other_failure))  as other_failure,
ProcessedFederatedResponseFailedStream._timestamp as _timestamp
insert into tst_table3;


from tst_table1 #log('~RealTimeFederatedExecutionPlan Table Insertion ~')
insert overwrite tst_table
    on tst_table.day == day;

from tst_table2 #log('~RealTimeFederatedExecutionPlan Table Insertion ~')
insert overwrite tst_table
    on tst_table.day == day;
   
from tst_table3 #log('~RealTimeFederatedExecutionPlan Table Insertion ~')
insert overwrite tst_table
    on tst_table.day == day;

From tst_table1
Select
    day as meta_day,
    total_attempts as meta_total_attempts,
    success as meta_success,
    total_failure as  meta_total_failure,
    processing_failure as meta_processing_failure,
    response_failure as  meta_response_failure,
    other_failure as meta_other_failure,
    _timestamp as meta_time
insert into exportFederatedSucessSummarryStream;

From tst_table2
Select
    day as meta_day,
    total_attempts as meta_total_attempts,
    success as meta_success,
    total_failure as  meta_total_failure,
    processing_failure as meta_processing_failure,
    response_failure as  meta_response_failure,
    other_failure as meta_other_failure,
    _timestamp as meta_time
insert into exportFederatedSucessSummarryStream;

From tst_table3
Select
    day as meta_day,
    total_attempts as meta_total_attempts,
    success as meta_success,
    total_failure as  meta_total_failure,
    processing_failure as meta_processing_failure,
    response_failure as  meta_response_failure,
    other_failure as meta_other_failure,
    _timestamp as meta_time
insert into exportFederatedSucessSummarryStream;
 
 
From tst_table1
Select
    day as meta_day,
    total_attempts as meta_total_attempts,
    success as meta_success,
    total_failure as  meta_total_failure,
    processing_failure as meta_processing_failure,
    response_failure as  meta_response_failure,
    other_failure as meta_other_failure,
    _timestamp as meta__timestamp
	group by day 
insert into exportStream;

 
From tst_table2
Select
    day as meta_day,
    total_attempts as meta_total_attempts,
    success as meta_success,
    total_failure as  meta_total_failure,
    processing_failure as meta_processing_failure,
    response_failure as  meta_response_failure,
    other_failure as meta_other_failure,
    _timestamp as meta__timestamp
	group by day 
insert into exportStream;

 
From tst_table3
Select
    day as meta_day,
    total_attempts as meta_total_attempts,
    success as meta_success,
    total_failure as  meta_total_failure,
    processing_failure as meta_processing_failure,
    response_failure as  meta_response_failure,
    other_failure as meta_other_failure,
    _timestamp as meta__timestamp
	group by day 
insert into exportStream;
/*
from tempStream
insert into tst_table;

from tempStream
delete tst_table
    on tempStream.day == day
    and max(tempStream.total_attempts)-1 >= total_attempts;
