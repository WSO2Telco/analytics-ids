<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<Analytics>
    <Name>ussd_dropouts_stat_analytics</Name>
    <Script>
		create temporary table user_status_raw_ussd_dropouts using CarbonAnalytics options (tableName "COM_WSO2TELCO_USERSTATUS", schema "sessionID STRING,status STRING,sourceIP STRING,forwardedIP STRING,_timestamp LONG -i",  incrementalParams "user_status_ussd_droputs, DAY");

        create temporary table user_status_meta_raw_ussd_dropouts using CarbonAnalytics options (tableName "COM_WSO2TELCO_USERSTATUS_META", schema "sessionID STRING,sourceIP STRING,operator STRING,appId STRING,msisdn STRING,isMSISDNHeader BOOLEAN,userAgent STRING,consumerKey STRING,state STRING,nonce STRING,scope STRING,acrValue STRING,loginHint STRING,isNewUser BOOLEAN,telcoScope STRING,status STRING,_timestamp LONG -i",  incrementalParams "user_status_meta_ussd_droputs, DAY");

        create temporary table ussd_dropout_summary using CarbonAnalytics options (tableName "COM_WSO2TELCO_SUMMARY_USSD_DROPOUTS", schema "day STRING -i, operator STRING -i -f, appID STRING -i -f, total_droputs LONG -i, cancel_dropouts LONG -i, invaloption_dropouts LONG -i, networkfail_dropouts LONG -i, timeout_dropouts LONG -i, _timestamp LONG -i", primaryKeys "day, operator, appID", incrementalParams "ussd_dropouts, DAY", mergeSchema "false");

        create temporary table ussd_dropouts_app using CarbonAnalytics options (tableName "COM_WSO2TELCO_SUMMARY_APP_USSD_DROPOUTS", schema "day STRING -i, appID STRING -i -f, total_droputs LONG -i, cancel_dropouts LONG -i, invaloption_dropouts LONG -i,  networkfail_dropouts LONG -i, timeout_dropouts LONG -i, _timestamp LONG -i", primaryKeys "day, appID");

        create temporary table ussd_dropouts_operator using CarbonAnalytics options (tableName "COM_WSO2TELCO_SUMMARY_OPERATOR_USSD_DROPOUTS", schema "day STRING -i, operator STRING -i -f, total_droputs LONG -i, cancel_dropouts LONG -i, invaloption_dropouts LONG -i, networkfail_dropouts LONG -i, timeout_dropouts LONG -i, _timestamp LONG -i", primaryKeys "day, operator");

        create temporary table ussd_dropouts_total using CarbonAnalytics options (tableName "COM_WSO2TELCO_SUMMARY_TOTAL_USSD_DROPOUTS", schema "day STRING -i, total_droputs LONG -i, cancel_dropouts LONG -i, invaloption_dropouts LONG -i, networkfail_dropouts LONG -i, timeout_dropouts LONG -i, _timestamp LONG -i", primaryKeys "day");



       insert into table ussd_dropout_summary select getDateString(total_dropouts.dayTimestamp),total_dropouts.operator,total_dropouts.appId,(checkNullforLong(total_dropouts.total_dropoutCount)) as total_dropoutCount,(checkNullforLong(canceldropouts.total_dropoutCount)) as total_canceldropouts,(checkNullforLong(invaloptiondropouts.total_dropoutCount)) as total_invaloptiondropouts,(checkNullforLong(networkdropouts.total_dropoutCount)) as total_networkdropouts,(checkNullforLong(total_dropouts.total_dropoutCount) - (checkNullforLong(canceldropouts.total_dropoutCount) + checkNullforLong(invaloptiondropouts.total_dropoutCount) + checkNullforLong(networkdropouts.total_dropoutCount))) as total_timeoutdropouts,total_dropouts.dayTimestamp from ( select  count(distinct droputsntimensess.sessionID) as total_dropoutCount, droputsntimensess.operator, droputsntimensess.appId, droputsntimensess.dayTimestamp as dayTimestamp from ( select droputs.sessionID as sessionID, ussdsess.msisdn as msisdn, time._timestamp as _timestamp,time.lasttimestamp as lasttimestamp,getDateTimestamp(time._timestamp) as  dayTimestamp, ussdsess.operator as operator,ussdsess.appId as appId from ( select distinct sessionID from user_status_raw_ussd_dropouts where status = "SEND_USSD_PUSH" except select distinct sessionID from user_status_raw_ussd_dropouts where status = "LOGIN_SUCCESS" ) as droputs inner join ( select sessionID, min(_timestamp) as _timestamp, max(_timestamp) as lasttimestamp from user_status_raw_ussd_dropouts where status !="LOGIN_SUCCESS" group by sessionID ) as time on time.sessionID=droputs.sessionID inner join ( select sessionID,min(msisdn) as msisdn,min(operator) as operator,min(appId) as appId from user_status_meta_raw_ussd_dropouts group by sessionID ) as ussdsess on ussdsess.sessionID=droputs.sessionID ) as droputsntimensess left join ( select allmsisdns.msisdn,allmsisdns.operator,allmsisdns.appId,smssend._timestamp from ( select sessionID, min(_timestamp) as _timestamp from user_status_raw_ussd_dropouts where status = "SEND_SMS" group by sessionID ) as smssend	inner join ( select sessionID, min(msisdn) as msisdn,min(operator) as operator,min(appId) as appId from user_status_meta_raw_ussd_dropouts group by sessionID ) as allmsisdns on allmsisdns.sessionID=smssend.sessionID ) as sendsms on sendsms.msisdn=droputsntimensess.msisdn and 0 &lt; sendsms._timestamp - droputsntimensess.lasttimestamp and sendsms._timestamp - droputsntimensess.lasttimestamp &lt;= 120000 and sendsms.operator=droputsntimensess.operator and  sendsms.appId=droputsntimensess.appId where sendsms.msisdn IS NULL and droputsntimensess.operator IS NOT NULL and droputsntimensess.appId IS NOT NULL group by droputsntimensess.operator, droputsntimensess.appId, droputsntimensess.dayTimestamp ) as total_dropouts left join ( select  count(distinct droputsntimensess.sessionID) as total_dropoutCount, droputsntimensess.operator, droputsntimensess.appId, droputsntimensess.dayTimestamp as dayTimestamp from  (	select droputs.sessionID as sessionID, ussdsess.msisdn as msisdn, time._timestamp as _timestamp, getDateTimestamp(time._timestamp) as  dayTimestamp, ussdsess.operator as operator,ussdsess.appId as appId from ( select distinct sessionID from	( select distinct sessionID from user_status_raw_ussd_dropouts where status = "SEND_USSD_PUSH" intersect select distinct sessionID from user_status_raw_ussd_dropouts where status = "RECEIVE_USSD_PUSH_REJECTED" or status ="USSD_AUTH_PROCESSING_FAIL"	) as cancelussdpush except	select distinct sessionID from user_status_raw_ussd_dropouts where status = "LOGIN_SUCCESS" ) as droputs inner join ( select sessionID, min(_timestamp) as _timestamp from user_status_raw_ussd_dropouts where status !="LOGIN_SUCCESS" group by sessionID ) as time on time.sessionID=droputs.sessionID inner join ( select sessionID,min(msisdn) as msisdn,min(operator) as operator,min(appId) as appId from user_status_meta_raw_ussd_dropouts group by sessionID ) as ussdsess on ussdsess.sessionID=droputs.sessionID ) as droputsntimensess group by droputsntimensess.dayTimestamp,droputsntimensess.operator,droputsntimensess.appId ) as canceldropouts on canceldropouts.dayTimestamp=total_dropouts.dayTimestamp and canceldropouts.operator=total_dropouts.operator and canceldropouts.appId=total_dropouts.appId left join (  select count(distinct droputsntimensess.sessionID) as total_dropoutCount, droputsntimensess.operator, droputsntimensess.appId, droputsntimensess.dayTimestamp as dayTimestamp from ( select droputs.sessionID as sessionID, ussdsess.msisdn as msisdn, time._timestamp as _timestamp, getDateTimestamp(time._timestamp) as  dayTimestamp, ussdsess.operator as operator,ussdsess.appId as appId from ( select distinct sessionID from ( select distinct sessionID from user_status_raw_ussd_dropouts where status = "SEND_USSD_PUSH" intersect select distinct sessionID from user_status_raw_ussd_dropouts where status = "RECEIVE_USSD_PUSH_FAIL" ) as invaloptionussdpush	except	select distinct sessionID from user_status_raw_ussd_dropouts where status = "LOGIN_SUCCESS"	) as droputs inner join ( select sessionID, min(_timestamp) as _timestamp from user_status_raw_ussd_dropouts where status !="LOGIN_SUCCESS" group by sessionID ) as time on time.sessionID=droputs.sessionID inner join ( select sessionID,min(msisdn) as msisdn,min(operator) as operator,min(appId) as appId from user_status_meta_raw_ussd_dropouts group by sessionID ) as ussdsess on ussdsess.sessionID=droputs.sessionID ) as droputsntimensess group by droputsntimensess.dayTimestamp,droputsntimensess.operator,droputsntimensess.appId ) as invaloptiondropouts on invaloptiondropouts.dayTimestamp=total_dropouts.dayTimestamp and invaloptiondropouts.operator=total_dropouts.operator and invaloptiondropouts.appId=total_dropouts.appId left join ( select count(distinct droputsntimensess.sessionID) as total_dropoutCount, droputsntimensess.operator, droputsntimensess.appId, droputsntimensess.dayTimestamp as dayTimestamp from ( select droputs.sessionID as sessionID, ussdsess.msisdn as msisdn, time._timestamp as _timestamp, getDateTimestamp(time._timestamp) as  dayTimestamp, ussdsess.operator as operator,ussdsess.appId as appId from ( select distinct sessionID from ( select distinct sessionID from user_status_raw_ussd_dropouts where status = "SEND_USSD_PUSH" intersect select distinct sessionID from user_status_raw_ussd_dropouts where status = "SEND_USSD_PUSH_FAIL" ) as networkfailussdpush except select distinct sessionID from user_status_raw_ussd_dropouts where status = "LOGIN_SUCCESS" ) as droputs inner join (  select sessionID, min(_timestamp) as _timestamp	from user_status_raw_ussd_dropouts where status !="LOGIN_SUCCESS" group by sessionID ) as time on time.sessionID=droputs.sessionID inner join (  select sessionID,min(msisdn) as msisdn,min(operator) as operator,min(appId) as appId from user_status_meta_raw_ussd_dropouts group by sessionID ) as ussdsess on ussdsess.sessionID=droputs.sessionID ) as droputsntimensess group by droputsntimensess.dayTimestamp,droputsntimensess.operator,droputsntimensess.appId ) as networkdropouts on networkdropouts.dayTimestamp=total_dropouts.dayTimestamp and networkdropouts.operator=total_dropouts.operator and networkdropouts.appId=total_dropouts.appId;


        INSERT INTO TABLE ussd_dropouts_app SELECT day, appID, SUM(total_droputs), SUM(cancel_dropouts), SUM(invaloption_dropouts), SUM(networkfail_dropouts), SUM(timeout_dropouts), _timestamp FROM ussd_dropout_summary GROUP BY day, appID, _timestamp;

        INSERT INTO TABLE ussd_dropouts_operator SELECT day, operator, SUM(total_droputs), SUM(cancel_dropouts), SUM(invaloption_dropouts), SUM(networkfail_dropouts), SUM(timeout_dropouts), _timestamp FROM ussd_dropout_summary GROUP BY day, operator, _timestamp;

        INSERT INTO TABLE ussd_dropouts_total SELECT day, SUM(total_droputs), SUM(cancel_dropouts), SUM(invaloption_dropouts), SUM(networkfail_dropouts), SUM(timeout_dropouts), _timestamp FROM ussd_dropout_summary GROUP BY day, _timestamp;

        INCREMENTAL_TABLE_COMMIT user_status_ussd_droputs;
        INCREMENTAL_TABLE_COMMIT user_status_meta_ussd_droputs;
        INCREMENTAL_TABLE_COMMIT ussd_dropouts;
    </Script>
    <CronExpression>0 0 0 1/1 * ? *</CronExpression>
</Analytics>
