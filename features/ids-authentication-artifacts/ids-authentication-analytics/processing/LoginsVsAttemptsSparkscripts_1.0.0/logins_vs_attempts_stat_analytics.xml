<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<Analytics>
    <Name>logins_vs_attempts_stat_analytics</Name>
    <Script>
        create temporary table user_status_raw_log_v_atmp using CarbonAnalytics options (tableName "COM_WSO2TELCO_USERSTATUS", schema "sessionID STRING,status STRING,sourceIP STRING,forwardedIP STRING,_timestamp LONG -i",  incrementalParams "user_status_raw_attemptsVlogins, DAY");        

		create temporary table user_status_meta_raw_log_v_atmp using CarbonAnalytics options (tableName "COM_WSO2TELCO_USERSTATUS_META", schema "sessionID STRING,sourceIP STRING,operator STRING,appId STRING,msisdn STRING,isMSISDNHeader BOOLEAN,userAgent STRING,consumerKey STRING,state STRING,nonce STRING,scope STRING,acrValue STRING,loginHint STRING,isNewUser BOOLEAN,telcoScope STRING,status STRING,_timestamp LONG -i",  incrementalParams "user_status_meta_raw_attemptsVlogins, DAY");

        create temporary table token_endpoint_raw_log_v_atmp using CarbonAnalytics options (tableName "COM_WSO2TELCO_TOKEN_ENDPOINT", schema "authenticatedUser STRING, state STRING, nonce STRING, amr STRING, authenticationCode STRING, accessToken STRING, sourceIP STRING, contentType STRING, clientID STRING, payload STRING, refreshToken STRING, tokenClaims STRING, requestStatus STRING, returnedResult STRING, statusCode STRING, sessionID STRING,_timestamp LONG -i",  incrementalParams "token_endpoint_raw_attemptsVlogins, DAY");

        create temporary table attemptsVlogins using CarbonAnalytics options (tableName "COM_WSO2TELCO_SUMMARY_ATTEMPTS_N_LOGINS",schema "day STRING -i, operator STRING -i, appID STRING -i,total_authCount LONG -i, total_tokenCount LONG -i, total_authFailed LONG -i, total_tokenFailed LONG -i, onnet_authCount LONG -i, onnet_tokenCount LONG -i, onnet_authFailed LONG -i, onnet_tokenFailed LONG -i, offnet_authCount LONG -i, offnet_tokenCount LONG -i, offnet_authFailed LONG -i, offnet_tokenFailed LONG -i, newUser_authCount LONG -i, oldUser_authCount LONG -i, _timestamp LONG -i", primaryKeys "day, operator, appID");

        insert into table attemptsVlogins select getDateString(totauth.dayTimestamp),totauth.operator, totauth.appId, totauth.total_authCount, tottoken.total_tokenCount, 0,0, totonnetauth.total_authCount,0, 0,0, totoffentauth.total_authCount,0, 0,0, totnewuserauth.total_authCount, totolduserauth.total_authCount, totauth.dayTimestamp from ( select count(totalauth.sessionID) as total_authCount,totalauth.dayTimestamp, totalauth.operator, totalauth.appId  from  ( select sessns.sessionID, getDateTimestamp(time._timestamp) as dayTimestamp,sessnopnapp.operator, sessnopnapp.appId from ( select distinct sessionID from user_status_raw_log_v_atmp  except select distinct sessionID from user_status_raw_log_v_atmp where status="SEND_SMS" or status="SEND_SMS_FAIL" ) as sessns inner join ( select sessionID, min(operator) as operator, min(appId) as appId from user_status_meta_raw_log_v_atmp where operator IS NOT NULL and appId IS NOT NULL and msisdn !="false"	group by sessionID ) as sessnopnapp on sessnopnapp.sessionID=sessns.sessionID inner join ( select sessionID, min(_timestamp) as _timestamp from  user_status_raw_log_v_atmp where status !="SEND_SMS" or status!="SEND_SMS_FAIL" group by sessionID ) as time on time.sessionID=sessns.sessionID ) as totalauth group by totalauth.dayTimestamp,totalauth.operator,totalauth.appId ) as totauth	left join ( select count(totaltoken.sessionID) as total_tokenCount,totaltoken.dayTimestamp,totaltoken.operator,totaltoken.appId from ( select sessntime.sessionID,getDateTimestamp(sessntime._timestamp) as dayTimestamp,sessnopnapp.operator,sessnopnapp.appId from ( select sessionID, max(_timestamp) as _timestamp from token_endpoint_raw_log_v_atmp group by sessionID ) as sessntime	inner join ( select sessionID, min(operator) as operator,min(appId) as appId from user_status_meta_raw_log_v_atmp where operator IS NOT NULL and appId IS NOT NULL group by sessionID ) as sessnopnapp on sessnopnapp.sessionID=sessntime.sessionID ) as totaltoken group by totaltoken.dayTimestamp,totaltoken.operator,totaltoken.appId ) as tottoken on tottoken.dayTimestamp=totauth.dayTimestamp and tottoken.operator=totauth.operator and tottoken.appId=totauth.appId left join ( select count(onnetauth.sessionID) as total_authCount,onnetauth.dayTimestamp, onnetauth.operator, onnetauth.appId from ( select sessns.sessionID, getDateTimestamp(time._timestamp) as dayTimestamp, sessnopnapp.operator, sessnopnapp.appId from ( select distinct sessionID from user_status_raw_log_v_atmp  except  select distinct sessionID from user_status_raw_log_v_atmp where status="SEND_SMS" or status="SEND_SMS_FAIL" ) as sessns inner join ( select singlrecdmeta.sessionID,allmeta.operator, allmeta.appId, allmeta.isMSISDNHeader from ( select sessionID, max(_timestamp) as _timestamp from                user_status_meta_raw_log_v_atmp where operator IS NOT NULL and appId IS NOT NULL and msisdn !="false" group by sessionID ) as singlrecdmeta inner join ( select sessionID,first(operator) as operator, first(appId) as appId, first(isMSISDNHeader) as isMSISDNHeader,_timestamp from user_status_meta_raw_log_v_atmp where operator IS NOT NULL and appId IS NOT NULL and msisdn !="false" group by sessionID,_timestamp ) as allmeta on allmeta.sessionID=singlrecdmeta.sessionID and allmeta._timestamp=singlrecdmeta._timestamp where allmeta.isMSISDNHeader = true ) as sessnopnapp on sessnopnapp.sessionID=sessns.sessionID inner join ( select sessionID, min(_timestamp) as _timestamp from  user_status_raw_log_v_atmp where status !="SEND_SMS" or status!="SEND_SMS_FAIL" group by sessionID ) as time on time.sessionID=sessns.sessionID ) as onnetauth group by onnetauth.dayTimestamp,onnetauth.operator,onnetauth.appId ) as totonnetauth on totonnetauth.dayTimestamp=totauth.dayTimestamp and totonnetauth.operator=totauth.operator and totonnetauth.appId=totauth.appId left join ( select count(offentauth.sessionID) as total_authCount,offentauth.dayTimestamp,offentauth.operator, offentauth.appId from ( select sessns.sessionID, getDateTimestamp(time._timestamp) as dayTimestamp, sessnopnapp.operator,sessnopnapp.appId from ( select distinct sessionID from user_status_raw_log_v_atmp except select distinct sessionID from user_status_raw_log_v_atmp where status="SEND_SMS" or status="SEND_SMS_FAIL" ) as sessns inner join ( select singlrecdmeta.sessionID, allmeta.operator, allmeta.appId, allmeta.isMSISDNHeader from ( select sessionID, max(_timestamp) as _timestamp from user_status_meta_raw_log_v_atmp where operator IS NOT NULL and appId IS NOT NULL and msisdn !="false" group by sessionID ) as singlrecdmeta inner join ( select sessionID,first(operator) as operator, first(appId) as appId, first(isMSISDNHeader) as isMSISDNHeader,_timestamp from user_status_meta_raw_log_v_atmp where operator IS NOT NULL and appId IS NOT NULL and msisdn !="false" group by sessionID,_timestamp	) as allmeta on allmeta.sessionID=singlrecdmeta.sessionID and allmeta._timestamp=singlrecdmeta._timestamp where allmeta.isMSISDNHeader = false ) as sessnopnapp on sessnopnapp.sessionID=sessns.sessionID inner join ( select sessionID, min(_timestamp) as _timestamp from user_status_raw_log_v_atmp   where status !="SEND_SMS" or status!="SEND_SMS_FAIL" group by sessionID ) as time on time.sessionID=sessns.sessionID ) as offentauth group by offentauth.dayTimestamp,offentauth.operator,offentauth.appId ) as totoffentauth on totoffentauth.dayTimestamp=totauth.dayTimestamp and totoffentauth.operator=totauth.operator and totoffentauth.appId=totauth.appId left join ( select count(newuserauth.sessionID) as total_authCount,newuserauth.dayTimestamp, newuserauth.operator, newuserauth.appId from ( select sessns.sessionID, getDateTimestamp(time._timestamp) as dayTimestamp, sessnopnapp.operator,sessnopnapp.appId from ( select distinct sessionID from user_status_raw_log_v_atmp  except  select distinct sessionID from user_status_raw_log_v_atmp where status="SEND_SMS" or status="SEND_SMS_FAIL"  ) as sessns inner join ( select singlrecdmeta.sessionID, allmeta.operator, allmeta.appId, allmeta.isNewUser from ( select sessionID, max(_timestamp) as _timestamp from user_status_meta_raw_log_v_atmp where operator IS NOT NULL and appId IS NOT NULL and msisdn !="false" group by sessionID ) as singlrecdmeta inner join ( select sessionID,first(operator) as operator,first(appId) as appId, max(isNewUser) as isNewUser,_timestamp from user_status_meta_raw_log_v_atmp where operator IS NOT NULL and appId IS NOT NULL and msisdn !="false" group by sessionID,_timestamp ) as allmeta on allmeta.sessionID=singlrecdmeta.sessionID and allmeta._timestamp=singlrecdmeta._timestamp where allmeta.isNewUser = true ) as sessnopnapp on sessnopnapp.sessionID=sessns.sessionID inner join (  select sessionID, min(_timestamp) as _timestamp from  user_status_raw_log_v_atmp where status !="SEND_SMS" or status!="SEND_SMS_FAIL" group by sessionID ) as time on time.sessionID=sessns.sessionID  ) as newuserauth group by newuserauth.dayTimestamp,newuserauth.operator,newuserauth.appId ) as totnewuserauth on totnewuserauth.dayTimestamp=totauth.dayTimestamp and totnewuserauth.operator=totauth.operator and totnewuserauth.appId=totauth.appId left join ( select count(olduserauth.sessionID) as total_authCount,olduserauth.dayTimestamp, olduserauth.operator, olduserauth.appId from ( select sessns.sessionID, getDateTimestamp(time._timestamp) as dayTimestamp, sessnopnapp.operator,sessnopnapp.appId from ( select distinct sessionID from user_status_raw_log_v_atmp  except select distinct sessionID from user_status_raw_log_v_atmp where status="SEND_SMS" or status="SEND_SMS_FAIL") as sessns inner join (	select singlrecdmeta.sessionID, allmeta.operator, allmeta.appId, allmeta.isNewUser from  ( select sessionID, max(_timestamp) as _timestamp from user_status_meta_raw_log_v_atmp where  operator IS NOT NULL and appId IS NOT NULL and msisdn !="false"	group by sessionID ) as singlrecdmeta inner join (	select sessionID,first(operator) as operator, first(appId) as appId, max(isNewUser) as isNewUser,_timestamp from user_status_meta_raw_log_v_atmp where operator IS NOT NULL and appId IS NOT NULL and msisdn !="false" group by sessionID,_timestamp ) as allmeta on allmeta.sessionID=singlrecdmeta.sessionID and allmeta._timestamp=singlrecdmeta._timestamp where allmeta.isNewUser = false ) as sessnopnapp on sessnopnapp.sessionID=sessns.sessionID inner join ( select sessionID, min(_timestamp) as _timestamp from user_status_raw_log_v_atmp where status !="SEND_SMS" or status!="SEND_SMS_FAIL" group by sessionID ) as time on time.sessionID=sessns.sessionID ) as olduserauth group by olduserauth.dayTimestamp,olduserauth.operator,olduserauth.appId ) as totolduserauth on totolduserauth.dayTimestamp=totauth.dayTimestamp and totolduserauth.operator=totauth.operator and totolduserauth.appId=totauth.appId;

        create temporary table attemptsVlogins_per_operator using CarbonAnalytics options (tableName "COM_WSO2TELCO_SUMMARY_OPERATOR_ATTEMPTS_N_LOGINS", schema "day STRING -i, operator STRING -i -f, total_authCount LONG -i, total_tokenCount LONG -i, total_authFailed LONG -i, total_tokenFailed LONG -i,
        onnet_authCount LONG -i, onnet_tokenCount LONG -i, onnet_authFailed LONG -i, onnet_tokenFailed LONG -i,
        offnet_authCount LONG -i, offnet_tokenCount LONG -i, offnet_authFailed LONG -i, offnet_tokenFailed LONG -i,
        newUser_authCount LONG -i, oldUser_authCount LONG -i,
        _timestamp LONG -i", primaryKeys "day, operator");

        INSERT INTO TABLE attemptsVlogins_per_operator SELECT day, operator,
        SUM(total_authCount), SUM(total_tokenCount), SUM(total_authFailed), SUM(total_tokenFailed),
        SUM(onnet_authCount), SUM(onnet_tokenCount), SUM(onnet_authFailed), SUM(onnet_tokenFailed),
        SUM(offnet_authCount), SUM(offnet_tokenCount), SUM(offnet_authFailed), SUM(offnet_tokenFailed),
        SUM(newUser_authCount), SUM(oldUser_authCount),
        _timestamp from attemptsVlogins GROUP BY day, _timestamp, operator;

        create temporary table attemptsVlogins_per_app using CarbonAnalytics options (tableName "COM_WSO2TELCO_SUMMARY_APP_ATTEMPTS_N_LOGINS", schema "day STRING -i, appID STRING -i -f, total_authCount LONG -i, total_tokenCount LONG -i, total_authFailed LONG -i, total_tokenFailed LONG -i,
        onnet_authCount LONG -i, onnet_tokenCount LONG -i, onnet_authFailed LONG -i, onnet_tokenFailed LONG -i,
        offnet_authCount LONG -i, offnet_tokenCount LONG -i, offnet_authFailed LONG -i, offnet_tokenFailed LONG -i,
        newUser_authCount LONG -i, oldUser_authCount LONG -i,
        _timestamp LONG -i", primaryKeys "day, appID");

        INSERT INTO TABLE attemptsVlogins_per_app SELECT day, appID,
        SUM(total_authCount), SUM(total_tokenCount), SUM(total_authFailed), SUM(total_tokenFailed),
        SUM(onnet_authCount), SUM(onnet_tokenCount), SUM(onnet_authFailed), SUM(onnet_tokenFailed),
        SUM(offnet_authCount), SUM(offnet_tokenCount), SUM(offnet_authFailed), SUM(offnet_tokenFailed),
        SUM(newUser_authCount), SUM(oldUser_authCount),
        _timestamp from attemptsVlogins GROUP BY day, _timestamp, appID;

        create temporary table attemptsVlogins_total using CarbonAnalytics options (tableName "COM_WSO2TELCO_SUMMARY_TOTAL_ATTEMPTS_N_LOGINS", schema "day STRING -i, total_authCount LONG -i, total_tokenCount LONG -i, total_authFailed LONG -i, total_tokenFailed LONG -i,
        onnet_authCount LONG -i, onnet_tokenCount LONG -i, onnet_authFailed LONG -i, onnet_tokenFailed LONG -i,
        offnet_authCount LONG -i, offnet_tokenCount LONG -i, offnet_authFailed LONG -i, offnet_tokenFailed LONG -i,
        newUser_authCount LONG -i, oldUser_authCount LONG -i,
        _timestamp LONG -i", primaryKeys "day");

        INSERT INTO TABLE attemptsVlogins_total SELECT day,
        SUM(total_authCount), SUM(total_tokenCount), SUM(total_authFailed), SUM(total_tokenFailed),
        SUM(onnet_authCount), SUM(onnet_tokenCount), SUM(onnet_authFailed), SUM(onnet_tokenFailed),
        SUM(offnet_authCount), SUM(offnet_tokenCount), SUM(offnet_authFailed), SUM(offnet_tokenFailed),
        SUM(newUser_authCount), SUM(oldUser_authCount),
        _timestamp from attemptsVlogins GROUP BY day, _timestamp;

        INCREMENTAL_TABLE_COMMIT user_status_raw_attemptsVlogins;
        INCREMENTAL_TABLE_COMMIT user_status_meta_raw_attemptsVlogins;
        INCREMENTAL_TABLE_COMMIT token_endpoint_raw_attemptsVlogins;
    </Script>
    <CronExpression>0 0 0 1/1 * ? *</CronExpression>
</Analytics>
